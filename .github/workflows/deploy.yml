name: Deploy to AWS ECS

on:
  push:
    branches:
      - cicd

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
          skip-logout: false

      - name: Build, tag, and push Docker image
        id: build-image
        run: |
          REPOSITORY_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}
          TAG=${{ github.sha }}

          docker build --target production -t $REPOSITORY_URI:$TAG .
          docker push $REPOSITORY_URI:$TAG

          echo "::set-output name=image::$REPOSITORY_URI:$TAG"

      - name: Update ECS service
        id: update-ecs-service
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ secrets.AWS_ECS_TASK_DEFINITION }})
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE_URI ${{ steps.build-image.outputs.image }} '.taskDefinition | .containerDefinitions[0].image = $IMAGE_URI | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json "{\"taskDefinition\": $NEW_TASK_DEFINITION}" | jq -r '.taskDefinition.taskDefinitionArn')

          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --task-definition $NEW_TASK_DEFINITION_ARN
